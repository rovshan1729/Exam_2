task 1


from django.contrib.auth.models import AbstractUser
from django.db.models import CharField
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.db import models


class User(AbstractUser):
    """
    Default custom user model for My Awesome Project.
    If adding fields that need to be filled at user signup,
    check forms.SignupForm and forms.SocialSignupForms accordingly.
    """

    # First and last name do not cover name patterns around the globe
    name = CharField(_("Name of User"), blank=True, max_length=255)
    first_name = None  # type: ignore
    last_name = None  # type: ignore

    is_deleted = models.BooleanField(default=False)

    def delete(self):
        self.is_deleted = True
        self.save()

    def save(self, *args, **kwargs):
        if self.is_deleted:
            self.is_active = False
            self.save()
        super().save(*args, **kwargs)


    def get_absolute_url(self) -> str:
        """Get URL for user's detail view.

        Returns:
            str: URL for user detail.

        """
        return reverse("users:detail", kwargs={"username": self.username})

task 2

# models.py

from django.db import models

class Vacancy(models.Model):
    title = models.CharField(max_length=255)

    salary_from = models.PositiveIntegerField(default=0)
    salary_to = models.PositiveIntegerField(default=0)
    salary = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.title

# for filters

from django.db.models import Q
from .models import Vacancy

def filter_vacancies_by_salary(salary):
    return Vacancy.objects.filter(salary=salary)

def filter_vacancies_by_salary_range(salary_from, salary_to):
    return Vacancy.objects.filter(salary_from__gte=salary_from, salary_to__lte=salary_to)


task 3 

from django.db import models
from rest_framework import serializers
from Crypto.Cipher import AES

class Product(models.Model):
    price = models.DecimalField(max_digits=10, decimal_places=2)
    marja = models.DecimalField(max_digits=10, decimal_places=2)
    package_code = models.CharField(max_length=100)

class ProductSerializer(serializers.ModelSerializer):
    price = serializers.SerializerMethodField()
    marja = serializers.SerializerMethodField()
    package_code = serializers.SerializerMethodField()

    def get_price(self, obj):
        return self.encrypt(obj.price)

    def get_marja(self, obj):
        return self.encrypt(obj.marja)

    def get_package_code(self, obj):
        return self.encrypt(obj.package_code)

    def encrypt(self, data):
        key = b'mysecretkey'
        cipher = AES.new(key, AES.MODE_EAX)
        ciphertext, tag = cipher.encrypt_and_digest(data.encode())
        return cipher.nonce + tag + ciphertext

task 4

class Team(BaseModel):
    title = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    coach = models.CharField(max_length=100)

    team_created = models.DateField()

    def __str__(self):
        return self.title

class Player(BaseModel):
    team = models.ForeignKey(Team, on_delete=models.CASCADE)

    title = models.CharField(max_length=100)
    nationality = models.CharField(max_length=100)
    position = models.CharField(max_length=100)

    age = models.PositiveIntegerField(default=0)
    goals_scored = models.PositiveIntegerField(default=0)
    assists = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.title
    
class ResultChoice(models.TextChoices):
    HOME = 'Home win'
    AWAY = 'Away win'
    DRAW = 'Draw'

class Match(BaseModel):
    home_team = models.ForeignKey(Team, related_name='home_matches', on_delete=models.CASCADE)
    away_team = models.ForeignKey(Team, related_name='away_matches', on_delete=models.CASCADE)

    date = models.DateField()

    stadium = models.CharField(max_length=100)
    result = models.CharField(max_length=10, choices=ResultChoice.choices)

    def __str__(self):
        return self.home_team.title

class Championship(BaseModel):
    title = models.CharField(max_length=100)
    country = models.CharField(max_length=100)

    starting = models.DateField()
    ending = models.DateField()

    def __str__(self):
        return self.title